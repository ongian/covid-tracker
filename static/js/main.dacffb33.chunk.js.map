{"version":3,"sources":["components/Header/Header.js","components/Footer/Footer.js","components/HOC/Aux.js","components/Body/Content/Home/UpdatesContainer/UpdatesContainer.js","components/Body/Content/Home/Home.js","components/Body/Content/Worlwide/Countries/Countries.js","components/Body/Content/Worlwide/Worldwide.js","components/Body/Body.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","to","pathname","Footer","Aux","children","UpdatesContainer","className","addClass","join","quantity","record","Home","state","updates","updatedTimeString","axios","get","then","update","updatedTime","Date","data","updated","toDateString","setState","postTime","this","length","cases","active","recovered","deaths","todayCases","critical","todayDeaths","Component","Countries","src","flag","alt","country","totalcase","totaldeaths","totalrecovered","totalactive","casetoday","deathtoday","Worldwide","countries","content","map","cty","ind","key","countryInfo","Body","path","exact","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wSAqBeA,EAlBA,SAACC,GACZ,OACI,gCACI,iCACI,2CACA,6BACI,4BACI,4BAAI,kBAAC,IAAD,CAAMC,GAAG,KAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAI,CACVC,SAAU,eADV,kBCPbC,EAFA,kBAAO,gCAAQ,iCAAS,0DCAxBC,EAFH,SAACJ,GAAD,OAAWA,EAAMK,U,iBCWdC,EATU,SAACN,GACtB,OACI,yBAAKO,UAAW,CAAC,UAAWP,EAAMQ,UAAUC,KAAK,MAC7C,uBAAGF,UAAU,YAAYP,EAAMU,UAC/B,uBAAGH,UAAU,UAAUP,EAAMW,UC4C1BC,E,4MA5CXC,MAAQ,CACJC,QAAS,GACTC,kBAAmB,I,kEAEH,IAAD,OACfC,IAAMC,IAAI,6CAA6CC,MAAK,SAAAC,GACxD,IAAMC,EAAc,IAAIC,KAAKF,EAAOG,KAAKC,SAASC,eAClD,EAAKC,SAAS,CAACX,QAASK,EAAOG,OAC/B,EAAKG,SAAS,CAACV,kBAAmBK,S,+BAKtC,IAAIM,EAAW,kBAIf,OAHGC,KAAKd,MAAME,kBAAkBa,SAC5BF,EAAWC,KAAKd,MAAME,mBAGtB,kBAAC,EAAD,KACI,6CACA,uBAAGR,UAAU,gBAAb,iBAA2CmB,GAC3C,yBAAKnB,UAAU,iBACX,6CACA,yBAAKA,UAAU,oBACX,kBAAC,EAAD,CAAkBC,SAAS,SAASE,SAAUiB,KAAKd,MAAMC,QAAQe,MAAOlB,OAAO,eAC/E,kBAAC,EAAD,CAAkBH,SAAS,WAAWE,SAAUiB,KAAKd,MAAMC,QAAQgB,OAAQnB,OAAO,iBAClF,kBAAC,EAAD,CAAkBH,SAAS,UAAUE,SAAUiB,KAAKd,MAAMC,QAAQiB,UAAWpB,OAAO,qBACpF,kBAAC,EAAD,CAAkBH,SAAS,SAASE,SAAUiB,KAAKd,MAAMC,QAAQkB,OAAQrB,OAAO,mBAGxF,yBAAKJ,UAAU,iBACX,6CACA,yBAAKA,UAAU,mBACX,kBAAC,EAAD,CAAkBC,SAAS,SAASE,SAAUiB,KAAKd,MAAMC,QAAQmB,WAAYtB,OAAO,aACpF,kBAAC,EAAD,CAAkBH,SAAS,UAAUE,SAAUiB,KAAKd,MAAMC,QAAQoB,SAAUvB,OAAO,mBACnF,kBAAC,EAAD,CAAkBH,SAAS,SAASE,SAAUiB,KAAKd,MAAMC,QAAQqB,YAAaxB,OAAO,wB,GApC1FyB,aCiBJC,EApBG,SAACrC,GACf,OACI,yBAAKO,UAAU,WACX,yBAAKA,UAAU,oBACX,yBAAK+B,IAAKtC,EAAMuC,KAAMC,IAAKxC,EAAMyC,UACjC,2BAAIzC,EAAMyC,UAEd,yBAAKlC,UAAU,eACX,0CAAgBP,EAAM0C,WACtB,4CAAkB1C,EAAM2C,aACxB,8CAAoB3C,EAAM4C,gBAC1B,2CAAiB5C,EAAM6C,aACvB,0CAAgB7C,EAAM8C,WACtB,2CAAiB9C,EAAM+C,YACvB,uBAAGxC,UAAU,WAAb,iBAAsCP,EAAMmB,WC2B7C6B,E,4MAtCXnC,MAAQ,CACJoC,UAAW,I,kEAGK,IAAD,OACfjC,IAAMC,IAAI,2CAA2CC,MAAK,SAAAuB,GACtD,EAAKhB,SAAS,CAACwB,UAAWR,EAAQnB,Y,+BAItC,IAAI4B,EAAU,kDAAuB,6BAAvB,mBAiBd,OAhBGvB,KAAKd,MAAMoC,UAAUrB,SACpBsB,EAAUvB,KAAKd,MAAMoC,UAAUE,KAAI,SAACC,EAAKC,GACrC,OAAO,kBAAC,EAAD,CACHC,IAAKD,EACLd,KAAMa,EAAIG,YAAYhB,KACtBE,QAASW,EAAIX,QACbC,UAAWU,EAAIvB,MACfc,YAAaS,EAAIpB,OACjBY,eAAgBQ,EAAIrB,UACpBc,YAAaO,EAAItB,OACjBgB,UAAWM,EAAInB,WACfc,WAAYK,EAAIjB,YAChBhB,OAAQ,IAAIE,KAAK+B,EAAI7B,SAASC,qBAKtC,kBAAC,EAAD,KACI,6CACA,yBAAKjB,UAAU,cACV2C,Q,GAhCGd,aCmBToB,E,4MAfX3C,MAAQ,G,uDAEJ,OACI,kBAAC,EAAD,KACI,kBAAC,EAAD,MACA,iCACI,kBAAC,IAAD,CAAO4C,KAAK,IAAIC,OAAK,EAACC,UAAW/C,IACjC,kBAAC,IAAD,CAAO6C,KAAK,aAAaE,UAAWX,KAExC,kBAAC,EAAD,W,GAVGZ,aCOJwB,MAVf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKrD,UAAU,OACb,kBAAC,EAAD,SCIYsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvD,MAAK,SAAAwD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dacffb33.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <header>\r\n            <section>\r\n                <h1>#StayAtHome</h1>\r\n                <nav>\r\n                    <ul>\r\n                        <li><Link to=\"/\" >Home</Link></li>\r\n                        <li><Link to={{\r\n                            pathname: '/worldwide'\r\n                        }} >Worlwide</Link></li>\r\n                    </ul>\r\n                </nav>\r\n            </section>\r\n        </header>\r\n    );\r\n}\r\n \r\nexport default Header;","import React from 'react';\r\n\r\nconst Footer = () => (<footer><section><p>Created by Christian Ong</p></section></footer>)\r\n \r\nexport default Footer;","const Aux = (props) => props.children\r\n \r\nexport default Aux;","import React from 'react';\r\n\r\nconst UpdatesContainer = (props) => {\r\n    return (\r\n        <div className={['updates', props.addClass].join(' ')}>\r\n            <p className=\"quantity\">{props.quantity}</p>\r\n            <p className=\"record\">{props.record}</p>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default UpdatesContainer;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Aux from '../../../HOC/Aux';\r\nimport UpdatesContainer from './UpdatesContainer/UpdatesContainer';\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        updates: {},\r\n        updatedTimeString: []\r\n    }\r\n    componentDidMount(){\r\n        axios.get('https://corona.lmao.ninja/v2/countries/ph').then(update => {\r\n            const updatedTime = new Date(update.data.updated).toDateString();\r\n            this.setState({updates: update.data});\r\n            this.setState({updatedTimeString: updatedTime});\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        let postTime = 'Loading Time...';\r\n        if(this.state.updatedTimeString.length){\r\n            postTime = this.state.updatedTimeString;\r\n        }\r\n        return (\r\n            <Aux>\r\n                <h1>Daily updates</h1>\r\n                <p className=\"last-updates\">Last updated: {postTime}</p>\r\n                <div className=\"total-updates\">\r\n                    <h2>Total updates</h2>\r\n                    <div className=\"totals-container\">\r\n                        <UpdatesContainer addClass=\"totals\" quantity={this.state.updates.cases} record=\"Total case\" />\r\n                        <UpdatesContainer addClass=\"admitted\" quantity={this.state.updates.active} record=\"Active cases\" />\r\n                        <UpdatesContainer addClass=\"recover\" quantity={this.state.updates.recovered} record=\"Total recoveries\" />\r\n                        <UpdatesContainer addClass=\"deaths\" quantity={this.state.updates.deaths} record=\"Total deaths\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"daily-updates\">\r\n                    <h2>Daily updates</h2>\r\n                    <div className=\"daily-container\">\r\n                        <UpdatesContainer addClass=\"totals\" quantity={this.state.updates.todayCases} record=\"New case\" />\r\n                        <UpdatesContainer addClass=\"recover\" quantity={this.state.updates.critical} record=\"New recoveries\" />\r\n                        <UpdatesContainer addClass=\"deaths\" quantity={this.state.updates.todayDeaths} record=\"Deaths today\" />\r\n                    </div>\r\n                </div>\r\n            </Aux>\r\n            \r\n        );\r\n    }\r\n}\r\n \r\nexport default Home;","import React from 'react';\r\n\r\nconst Countries = (props) => {\r\n    return (\r\n        <div className=\"country\">\r\n            <div className=\"flag-and-country\">\r\n                <img src={props.flag} alt={props.country} />\r\n                <p>{props.country}</p>\r\n            </div>\r\n            <div className=\"countryInfo\">\r\n                <p>Total case: {props.totalcase}</p>\r\n                <p>Total deaths: {props.totaldeaths}</p>\r\n                <p>Total recovery: {props.totalrecovered}</p>\r\n                <p>Active case: {props.totalactive}</p>\r\n                <p>Case today: {props.casetoday}</p>\r\n                <p>Death today: {props.deathtoday}</p>\r\n                <p className=\"updated\">Last updates: {props.update}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Countries;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Countries from './Countries/Countries';\r\nimport Aux from '../../../HOC/Aux';\r\nclass Worldwide extends Component {\r\n    state = {\r\n        countries: []\r\n    }\r\n\r\n    componentDidMount(){\r\n        axios.get('https://corona.lmao.ninja/v2/countries/').then(country => {\r\n            this.setState({countries: country.data})\r\n        })\r\n    }\r\n    render() { \r\n        let content = <p>Loading records.....<br />Please wait....</p>;\r\n        if(this.state.countries.length){\r\n            content = this.state.countries.map((cty, ind) => {\r\n                return <Countries \r\n                    key={ind} \r\n                    flag={cty.countryInfo.flag}\r\n                    country={cty.country}\r\n                    totalcase={cty.cases}\r\n                    totaldeaths={cty.deaths}\r\n                    totalrecovered={cty.recovered}\r\n                    totalactive={cty.active}\r\n                    casetoday={cty.todayCases}\r\n                    deathtoday={cty.todayDeaths}\r\n                    update={new Date(cty.updated).toDateString()}\r\n                    />\r\n            })\r\n        }\r\n        return (\r\n            <Aux>\r\n                <h1>Worlwide case</h1>\r\n                <div className=\"world-case\">\r\n                    {content}\r\n                </div>\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Worldwide;","import React, { Component } from 'react';\r\nimport {Route} from 'react-router-dom';\r\nimport Header from '../Header/Header';\r\nimport Footer from '../Footer/Footer';\r\nimport Aux from '../HOC/Aux';\r\nimport Home from '../Body/Content/Home/Home';\r\nimport Worldwide from '../Body/Content/Worlwide/Worldwide';\r\nclass Body extends Component {\r\n    state = {  }\r\n    render() { \r\n        return (\r\n            <Aux>\r\n                <Header />\r\n                <section>\r\n                    <Route path=\"/\" exact component={Home} />\r\n                    <Route path=\"/worldwide\" component={Worldwide} />\r\n                </section>\r\n                <Footer />\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Body;","import React from 'react';\nimport './main.css';\nimport Body from '../src/components/Body/Body';\nimport {BrowserRouter} from 'react-router-dom';\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Body />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}